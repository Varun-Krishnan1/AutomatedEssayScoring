write.csv(filtered_data, file = new_file_path, row.names = FALSE)
cat("Filtered data saved to:", new_file_path, "\n")
}
library(tools)
# Iterate over the CSV files
for (csv_file in csv_files) {
print(csv_file)
# Read the CSV file
data <- read.csv(csv_file)
# Filter rows based on the values in the specific column
filtered_data <- data %>% filter(filename %in% values_to_keep)
# New length of file
print(nrow(filtered_data))
# Append "-trunc" to the original file name
new_file_name <- file_path_sans_ext(basename(csv_file))
new_file_path <- file_path_sans_ext(csv_file)
new_file_path <- paste0(new_file_path, "-trunc.csv")
# Write the filtered data to the new CSV file
write.csv(filtered_data, file = new_file_path, row.names = FALSE)
cat("Filtered data saved to:", new_file_path, "\n")
}
source("~/Desktop/AES/TestingWithSampleEssays/MinimProcessedRows.R")
source("~/Desktop/AES/TestingWithSampleEssays/MinimProcessedRows.R")
# Iterate over the CSV files
for (csv_file in csv_files) {
print(csv_file)
# Read the CSV file
data <- read.csv(csv_file)
# Check if the column name is "Filename" or "filename" and convert it to "filename"
if ("Filename" %in% colnames(data)) {
colnames(data)[colnames(data) == "Filename"] <- "filename"
} else if ("filename" %in% colnames(data)) {
colnames(data)[colnames(data) == "filename"] <- "filename"
}
# Get basename for each file in csv ("../../17834.txt" -> "17834.txt")
file_path = data$filename[1] # 1-based indexing
# Fix windows filepaths so below basename() function works
if (startsWith(file_path, "C:")) {
# Replacing backslashes with forward slashes
data$filename <- gsub("\\\\", "/", data$filename)
}
# Replace full file paths with basename in the "filename" column so it matches authors column
data$filename <- basename(data$filename)
our_output_dict[[key]] <- data
# Filter rows based on the values in the specific column
filtered_data <- data %>% filter(filename %in% values_to_keep)
# New length of file
print(nrow(filtered_data))
# Append "-trunc" to the original file name
new_file_name <- file_path_sans_ext(basename(csv_file))
new_file_path <- file_path_sans_ext(csv_file)
new_file_path <- paste0(new_file_path, "-trunc.csv")
# Write the filtered data to the new CSV file
write.csv(filtered_data, file = new_file_path, row.names = FALSE)
cat("Filtered data saved to:", new_file_path, "\n")
}
source("~/Desktop/AES/TestingWithSampleEssays/MinimProcessedRows.R")
library(fs)
output_folder <- "SampleEssaysFeaturesTrunc/"
# Iterate over the CSV files
for (csv_file in csv_files) {
print(csv_file)
# Read the CSV file
data <- read.csv(csv_file)
# Check if the column name is "Filename" or "filename" and convert it to "filename"
if ("Filename" %in% colnames(data)) {
colnames(data)[colnames(data) == "Filename"] <- "filename"
} else if ("filename" %in% colnames(data)) {
colnames(data)[colnames(data) == "filename"] <- "filename"
}
# Get basename for each file in csv ("../../17834.txt" -> "17834.txt")
file_path = data$filename[1] # 1-based indexing
# Fix windows filepaths so below basename() function works
if (startsWith(file_path, "C:")) {
# Replacing backslashes with forward slashes
data$filename <- gsub("\\\\", "/", data$filename)
}
# Replace full file paths with basename in the "filename" column so it matches authors column
data$filename <- basename(data$filename)
our_output_dict[[key]] <- data
# Filter rows based on the values in the specific column
filtered_data <- data %>% filter(filename %in% values_to_keep)
# Extract the filename without extension
file_name <- fs::path_file(csv_file)
file_name <- gsub("\\.csv$", "", file_name)
# Create the output file path
output_file <- file.path(output_folder, paste0(file_name, "-trunc.csv"))
# Write the filtered data to the new CSV file
write.csv(filtered_data, file = output_file, row.names = FALSE)
cat("Filtered data saved to:", output_file, "\n")
}
source("~/Desktop/AES/TestingWithSampleEssays/MinimProcessedRows.R")
source("~/Desktop/AES/TestingWithSampleEssays/MinimProcessedRows.R")
source("~/Desktop/AES/TestingWithSampleEssays/MinimProcessedRows.R")
source("~/Desktop/AES/TestingWithSampleEssays/MinimProcessedRows.R")
source("~/Desktop/AES/TestingWithSampleEssays/SampleEssayValidation.R")
source("~/Desktop/AES/TestingWithSampleEssays/MinimProcessedRows.R")
source("~/Desktop/AES/TestingWithSampleEssays/MinimProcessedRows.R")
source("~/Desktop/AES/TestingWithSampleEssays/SampleEssayValidation.R")
source("~/Desktop/AES/TestingWithSampleEssays/MinimProcessedRows.R")
filename <- "d7-training-gamet-filtered"
words <- strsplit(filename, "-")[[1]]
word_before_last_hyphen <- words[length(words) - 1]
print(word_before_last_hyphen)
debugSource("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
debugSource("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
our_file_list
# Ensure this is top-level folder for Sample Essays (.../Sample Essays)
base_folder = "~/Desktop/AES/Feature Selection"
setwd(base_folder)
our_output_folder = "SampleEssaysTruncFiltered/"
author_output_folder = "AuthorFeaturesFiltered/"
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
ls
author_file_list <- list.files(path = author_output_folder, pattern = "*.csv", full.names = TRUE)
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
our_output_folder = "SampleEsssaysTruncFiltered/"
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
# Store output data in dictionary in format (gamet: gamet_data, seance: seance_data, etc...)
our_output_dict <- list()
author_output_dict <- list()
# Construct our output dictionary
for (file in our_file_list) {
# Extract the filename from the full path ("d7-training-gamet-filtered" -> "gamet")
words <- strsplit(file, "-")[[1]]
word_before_last_hyphen <- words[length(words) - 1]
key <- word_before_last_hyphen
data <- read.csv(file)
our_output_dict[[key]] <- data
}
our_output_dict
View(our_output_dict[["gamet"]])
debugSource("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
debugSource("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
debugSource("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R", echo=TRUE)
# Ensure this is top-level folder for Sample Essays (.../Sample Essays)
base_folder = "~/Desktop/AES/Feature Selection"
setwd(base_folder)
our_output_folder = "SampleEsssaysTruncFiltered/"
author_output_folder = "AuthorFeaturesFiltered/"
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
author_file_list <- list.files(path = author_output_folder, pattern = "*.csv", full.names = TRUE)
# Store output data in dictionary in format (gamet: gamet_data, seance: seance_data, etc...)
our_output_dict <- list()
author_output_dict <- list()
# Construct our output dictionary
for (file in our_file_list) {
# Extract the filename from the full path ("d7-training-gamet-filtered" -> "gamet")
words <- strsplit(file, "-")[[1]]
word_before_last_hyphen <- words[length(words) - 1]
key <- word_before_last_hyphen
data <- read.csv(file)
our_output_dict[[key]] <- data
View(our_output_dict[[key]])
}
source("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
source("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
source("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
source("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
source("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
source("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
source("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
source("~/Desktop/AES/TestingWithSampleEssays/SampleEssayValidation.R")
source("~/Desktop/AES/Feature Selection/FeatureSelectionValidation.R")
source("~/Desktop/AES/Feature Selection Cheating/FeatureSelectionCheating.R")
# Ensure this is top-level folder for Feature Selection Cheating (.../Feature Selection Cheating)
base_folder = "~/Desktop/AES/Feature Selection Cheating"
setwd(base_folder)
our_output_folder = "../TestingWithSampleEssays/SampleEsssaysTrunc/"
author_output_folder = "../Feature Selection/AuthorFeaturesFiltered/"
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
source("~/Desktop/AES/Feature Selection Cheating/FeatureSelectionCheating.R")
debugSource("~/Desktop/AES/Feature Selection Cheating/FeatureSelectionCheating.R")
# Ensure this is top-level folder for Feature Selection Cheating (.../Feature Selection Cheating)
base_folder = "~/Desktop/AES/Feature Selection Cheating"
setwd(base_folder)
our_output_folder = "../TestingWithSampleEssays/SampleEssaysFeaturesTrunc/"
author_output_folder = "../Feature Selection/AuthorFeaturesFiltered/"
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
author_file_list <- list.files(path = author_output_folder, pattern = "*.csv", full.names = TRUE)
# Store output data in dictionary in format (gamet: gamet_data, seance: seance_data, etc...)
our_output_dict <- list()
author_output_dict <- list()
# Construct our output dictionary
for (file in our_file_list) {
filename <- basename(file)  # Extract the filename from the full path ("d7-training-gamet" -> "gamet")
key <- gsub(".csv$", "", sub(".*-", "", filename))  # Extract the key from the filename
data <- read.csv(file)
# Check if the column name is "Filename" or "filename" and convert it to "filename"
if ("Filename" %in% colnames(data)) {
colnames(data)[colnames(data) == "Filename"] <- "filename"
} else if ("filename" %in% colnames(data)) {
colnames(data)[colnames(data) == "filename"] <- "filename"
}
# Get basename for each file in csv ("../../17834.txt" -> "17834.txt")
file_path = data$filename[1] # 1-based indexing
# Fix windows filepaths so below basename() function works
if (startsWith(file_path, "C:")) {
# Replacing backslashes with forward slashes
data$filename <- gsub("\\\\", "/", data$filename)
}
# Replace full file paths with basename in the "filename" column so it matches authors column
data$filename <- basename(data$filename)
our_output_dict[[key]] <- data
}
# Construct author output dictionary
for (file in author_file_list) {
# Extract the filename from the full path ("d7-training-gamet-filtered" -> "gamet")
words <- strsplit(file, "-")[[1]]
word_before_last_hyphen <- words[length(words) - 1]
key <- word_before_last_hyphen
data <- read.csv(file)
author_output_dict[[key]] <- data
}
# Ensure keys match
print(names(our_output_dict))
print(names(author_output_dict))
print("### Checking Matching Number of Rows ###")
total_essays = 277
print(paste("Total Essays (Rows): ", total_essays))
for (key in names(our_output_dict)) {
print(paste("---", toupper(key), "---"))
df <- our_output_dict[[key]]
if(nrow(df) != total_essays) {
print(paste("!DF Num Rows does not match!: ", nrow(df)))
}
else {
print("Num Rows Match")
}
}
# Remove columns not in author_output_dict
new_output_folder <- "SampleEssaysFeaturesTruncCheatingFiltered/"
for (key in names(our_output_dict)) {
if (key %in% names(author_output_dict)) {
our_df <- our_output_dict[[key]]
author_df <- author_output_dict[[key]]
# Get common columns
common_cols <- intersect(colnames(our_df), colnames(author_df))
# Remove columns not in author_output_dict
our_output_dict[[key]] <- our_df[, common_cols]
# Save the updated dataframe as a new CSV file
new_filename <- paste0(new_output_folder, "/", key, "-filtered.csv")
write.csv(our_output_dict[[key]], new_filename, row.names = FALSE)
}
}
debugSource("~/Desktop/AES/Feature Selection Cheating/FeatureSelectionCheating.R")
# Ensure this is top-level folder for Feature Selection Cheating (.../Feature Selection Cheating)
base_folder = "~/Desktop/AES/Feature Selection Cheating"
setwd(base_folder)
our_output_folder = "../TestingWithSampleEssays/SampleEssaysFeaturesTrunc/"
author_output_folder = "../Feature Selection/AuthorFeaturesFiltered/"
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
author_file_list <- list.files(path = author_output_folder, pattern = "*.csv", full.names = TRUE)
# Store output data in dictionary in format (gamet: gamet_data, seance: seance_data, etc...)
our_output_dict <- list()
author_output_dict <- list()
# Construct our output dictionary
for (file in our_file_list) {
filename <- basename(file)  # Extract the filename from the full path ("d7-training-gamet" -> "gamet")
key <- gsub(".csv$", "", sub(".*-", "", filename))  # Extract the key from the filename
data <- read.csv(file)
# Check if the column name is "Filename" or "filename" and convert it to "filename"
if ("Filename" %in% colnames(data)) {
colnames(data)[colnames(data) == "Filename"] <- "filename"
} else if ("filename" %in% colnames(data)) {
colnames(data)[colnames(data) == "filename"] <- "filename"
}
# Get basename for each file in csv ("../../17834.txt" -> "17834.txt")
file_path = data$filename[1] # 1-based indexing
# Fix windows filepaths so below basename() function works
if (startsWith(file_path, "C:")) {
# Replacing backslashes with forward slashes
data$filename <- gsub("\\\\", "/", data$filename)
}
# Replace full file paths with basename in the "filename" column so it matches authors column
data$filename <- basename(data$filename)
our_output_dict[[key]] <- data
}
# Construct author output dictionary
for (file in author_file_list) {
# Extract the filename from the full path ("d7-training-gamet-filtered" -> "gamet")
words <- strsplit(file, "-")[[1]]
word_before_last_hyphen <- words[length(words) - 1]
key <- word_before_last_hyphen
data <- read.csv(file)
author_output_dict[[key]] <- data
}
# Ensure keys match
print(names(our_output_dict))
print(names(author_output_dict))
print("### Checking Matching Number of Rows ###")
total_essays = 277
print(paste("Total Essays (Rows): ", total_essays))
for (key in names(our_output_dict)) {
print(paste("---", toupper(key), "---"))
df <- our_output_dict[[key]]
if(nrow(df) != total_essays) {
print(paste("!DF Num Rows does not match!: ", nrow(df)))
}
else {
print("Num Rows Match")
}
}
# Remove columns not in author_output_dict
new_output_folder <- "SampleEssaysFeaturesTruncCheatingFiltered/"
for (key in names(our_output_dict)) {
if (key %in% names(author_output_dict)) {
our_df <- our_output_dict[[key]]
author_df <- author_output_dict[[key]]
# Get common columns
common_cols <- intersect(colnames(our_df), colnames(author_df))
# Remove columns not in author_output_dict
our_output_dict[[key]] <- our_df[, common_cols]
# Save the updated dataframe as a new CSV file
new_filename <- paste0(new_output_folder, "/", "Cheating-SampleEssays-", key, "-filtered.csv")
write.csv(our_output_dict[[key]], new_filename, row.names = FALSE)
}
}
print("### Checking Matching Column Names ###")
source("~/Desktop/AES/Feature Selection Cheating/FeatureSelectionCheatingValidation.R")
our_output_folder = "SampleEssaysFeaturesTruncCheatingFiltered/"
author_output_folder = "AuthorFeaturesFiltered/"
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
# Ensure this is top-level folder for Feature Selection (.../Feature Selection)
base_folder = "~/Desktop/AES/Feature Selection Cheating"
setwd(base_folder)
our_output_folder = "SampleEssaysFeaturesTruncCheatingFiltered/"
author_output_folder = "AuthorFeaturesFiltered/"
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
author_file_list <- list.files(path = author_output_folder, pattern = "*.csv", full.names = TRUE)
author_output_folder = "../Feature Selection/AuthorFeaturesFiltered/"
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
author_file_list <- list.files(path = author_output_folder, pattern = "*.csv", full.names = TRUE)
# Store output data in dictionary in format (gamet: gamet_data, seance: seance_data, etc...)
our_output_dict <- list()
author_output_dict <- list()
# Construct our output dictionary
for (file in our_file_list) {
# Extract the filename from the full path ("d7-training-gamet-filtered" -> "gamet")
words <- strsplit(file, "-")[[1]]
word_before_last_hyphen <- words[length(words) - 1]
key <- word_before_last_hyphen
data <- read.csv(file)
our_output_dict[[key]] <- data
}
# Construct author output dictionary
for (file in author_file_list) {
# Extract the filename from the full path ("d7-training-gamet-filtered" -> "gamet")
words <- strsplit(file, "-")[[1]]
word_before_last_hyphen <- words[length(words) - 1]
key <- word_before_last_hyphen
data <- read.csv(file)
author_output_dict[[key]] <- data
}
# Ensure keys match
print(names(our_output_dict))
print(names(author_output_dict))
#### Ensure all rows have same number of rows as original (277 after truncating) ####
# Ensure we didn't lose any rows during feature selection
print("### Checking Matching Number of Rows ###")
total_essays = 277
print(paste("Total Essays (Rows): ", total_essays))
for (key in names(our_output_dict)) {
print(paste("---", toupper(key), "---"))
df <- our_output_dict[[key]]
if(nrow(df) != total_essays) {
print(paste("!DF Num Rows does not match!: ", nrow(df)))
}
else {
print("Num Rows Match")
}
}
print("### Checking Matching Column Names ###")
total_our_features = 0
total_author_features = 0
for (key in names(our_output_dict)) {
print(paste("---", toupper(key), "---"))
if (is.null(author_output_dict[[key]])) {
print(paste("Key", key, "is present in our_output_dict but not in author_output_dict"))
next
}
df1 <- our_output_dict[[key]]
df2 <- author_output_dict[[key]]
# keep track of total features after filtering
total_our_features = total_our_features + length(names(df1))
total_author_features = total_author_features + length(names(df2))
# Check if the data frames have the same columns
if (!identical(names(df1), names(df2))) {
identical = TRUE
missing_cols1 <- setdiff(names(df2), names(df1))
missing_cols2 <- setdiff(names(df1), names(df2))
if (length(missing_cols1) > 0 && !(length(missing_cols1) == 1 && missing_cols1 %in% c("Filename", "filename"))) {
print(paste("Columns missing in our_output_dict for key", key, ":"))
print(missing_cols1)
print(paste(length(missing_cols1), "missing"))
identical = FALSE
}
if (length(missing_cols2) > 0 && !(length(missing_cols2) == 1 && missing_cols2 %in% c("Filename", "filename"))) {
print(paste("Columns missing in author_output_dict for key", key, ":"))
print(missing_cols2)
print(paste(length(missing_cols2), "missing"))
identical = FALSE
}
if(identical) {
print("Identitical Column Names")
}
}
else {
print("Identitical Column Names")
}
}
print(paste("Total Our features after filtering:", total_our_features))
print(paste("Total Author features after filtering:", total_author_features))
# Ensure this is top-level folder for Feature Selection Cheating (.../Feature Selection Cheating)
base_folder = "~/Desktop/AES/Feature Selection Cheating"
setwd(base_folder)
# use the normalized data to generate final filtered features
our_output_folder = "SampleEssaysFeaturesTruncNormalized/"
author_output_folder = "../Feature Selection/AuthorFeaturesFiltered/"
# Ensure this is top-level folder for Feature Selection Cheating (.../Feature Selection Cheating)
base_folder = "~/Desktop/AES/Feature Selection Cheating"
setwd(base_folder)
# use the normalized data to generate final filtered features
our_output_folder = "SampleEssaysFeaturesTruncNormalized/"
author_output_folder = "../Feature Selection/AuthorFeaturesFiltered/"
# Get a list of all CSV files in the folder
our_file_list <- list.files(path = our_output_folder, pattern = "*.csv", full.names = TRUE)
author_file_list <- list.files(path = author_output_folder, pattern = "*.csv", full.names = TRUE)
# Store output data in dictionary in format (gamet: gamet_data, seance: seance_data, etc...)
our_output_dict <- list()
author_output_dict <- list()
# Construct our output dictionary
for (file in our_file_list) {
filename <- basename(file)  # Extract the filename from the full path ("d7-training-gamet" -> "gamet")
key <- gsub(".csv$", "", sub(".*-", "", filename))  # Extract the key from the filename
data <- read.csv(file)
# Check if the column name is "Filename" or "filename" and convert it to "filename"
if ("Filename" %in% colnames(data)) {
colnames(data)[colnames(data) == "Filename"] <- "filename"
} else if ("filename" %in% colnames(data)) {
colnames(data)[colnames(data) == "filename"] <- "filename"
}
# Get basename for each file in csv ("../../17834.txt" -> "17834.txt")
file_path = data$filename[1] # 1-based indexing
# Fix windows filepaths so below basename() function works
if (startsWith(file_path, "C:")) {
# Replacing backslashes with forward slashes
data$filename <- gsub("\\\\", "/", data$filename)
}
# Replace full file paths with basename in the "filename" column so it matches authors column
data$filename <- basename(data$filename)
our_output_dict[[key]] <- data
}
View(our_output_dict[["gamet"]])
View(our_output_dict[["sca"]])
# Construct author output dictionary
for (file in author_file_list) {
# Extract the filename from the full path ("d7-training-gamet-filtered" -> "gamet")
words <- strsplit(file, "-")[[1]]
word_before_last_hyphen <- words[length(words) - 1]
key <- word_before_last_hyphen
data <- read.csv(file)
author_output_dict[[key]] <- data
}
# Ensure keys match
print(names(our_output_dict))
print(names(author_output_dict))
print("### Checking Matching Number of Rows ###")
total_essays = 277
print(paste("Total Essays (Rows): ", total_essays))
for (key in names(our_output_dict)) {
print(paste("---", toupper(key), "---"))
df <- our_output_dict[[key]]
if(nrow(df) != total_essays) {
print(paste("!DF Num Rows does not match!: ", nrow(df)))
}
else {
print("Num Rows Match")
}
}
# Remove columns not in author_output_dict
new_output_folder <- "SampleEssaysFeaturesTruncCheatingNormalizedFiltered/"
for (key in names(our_output_dict)) {
if (key %in% names(author_output_dict)) {
our_df <- our_output_dict[[key]]
author_df <- author_output_dict[[key]]
# Get common columns
common_cols <- intersect(colnames(our_df), colnames(author_df))
# Remove columns not in author_output_dict
our_output_dict[[key]] <- our_df[, common_cols]
# Save the updated dataframe as a new CSV file
new_filename <- paste0(new_output_folder, "/", "Cheating-SampleEssays-", key, "-filtered.csv")
write.csv(our_output_dict[[key]], new_filename, row.names = FALSE)
}
}
source("~/Desktop/AES/Feature Selection Cheating/FeatureSelectionCheatingValidation.R")
3 * 4/6
1 * 4/6
2 * 4/6
3 * 4/6
4 * 4/6
5 * 4/6
